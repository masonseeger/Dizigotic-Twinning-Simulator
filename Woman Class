import java.util.Random;
import java.util.ArrayList;
//This is the class objectifying women.
//It will show the amount of children the mother 
//raises and the statistics surrounding that.
public class Woman {
	Random rand = new Random();
	ArrayList<Child> children = new ArrayList<Child>();
	int age;
	double pSOvu;
	double pDOvu;
	double pLb;
	double pSb;
	int numDead;
	int numLive;
	int dt1;
	int dt2;
	int dt3;
	int dt4;
	double momNatDeath;
	double momBirthDeath;
	int ageOfMeno;
	boolean isPrego;
	boolean isDead;
	boolean singleO;
	boolean doubleO;
	int pregNum;
	int totalBabbies; // all eggs that are successfully fertilized
	int actualCrotchDemons; // all children birthed that lived to the age of 15
	int notFoetusBabbie; // all children who were birthed
	double dubOChance[];
	boolean switchOv = false;
	int flipSwitch = 0;
	int twinCt = 0;
	double iBInterval = 0;
	Child help = new Child();
	int totalTwins;
	int TypeofDeath = 0;
	
	public Woman()
			{
			age = 180;
			pSOvu = 1;
			pDOvu = 0;
			pLb = 0; //need values from bio squad
			pSb = 1-pLb;
			ageOfMeno = 600;
			isPrego = false;
			isDead = false;
			}
	
	//tells if mother has died of natural causes
	public void isMommyDead()
	{
		int rn = rand.nextInt(10000);
		if (rn<25)
		{
		isDead=true;
		TypeofDeath = 1;
		}
		else
			age++;
	}
	
	public void setDoubleOArray(double a[])
	{
		dubOChance = a;
	}
	//checks if mom dies during single birth;
	public void isMommyDeadS(int BP)
	{
		int rn = rand.nextInt(1000)+1;
		if (rn<BP)
		{
			TypeofDeath = 2;
			isDead = true;
		}
	}
	
	//checks if moms dies during twin birth
	public void isMommyDeadD(int BP)
	{
		int rn = rand.nextInt(1000)+1;
		if(rn<BP)
		{
			TypeofDeath = 2;
			isDead=true;
		}
	}
	
	//this method runs childbirth and the chance of the mother or child dying
	public void childBirth()
	{
		isPrego = false;
		if (singleO)
			isMommyDeadS(8);
		else
			isMommyDeadD(30);
	}
	
	//add chance of prob of single and double ovulation into the
	//method as well as trying to add a child 
	public boolean gotPregers()
	{
		int test = rand.nextInt(100) + 1;
		
		if (test >30)
			{
			isPrego = true;
			pregNum++;
			return true;
			}
		else
			return false;
		
	}
	
	public void childCt() // method counts the number of children who lived to age 15 and those who died
	{
		for (Child T : children)
		{
			if (T.isDead)
			{
				if(T.isTwin)
				{
					totalTwins++;
				}
					numDead++;
			totalBabbies++;
			if (T.age>=0)
				notFoetusBabbie++;
			if(T.deathBy==1)
				dt1++;
			else if (T.deathBy == 2)
				dt2 ++;
			else if (T.deathBy==3)
				dt3++;
			else
				dt4++;
			}	
			else	
			{
				if(T.isTwin)
				{
					totalTwins++;
				}
					if (help == null)
				{
					help = T;
				}
				else
				{
					iBInterval +=  T.timeOB - help.timeOB;
					help = T;
				}
				numLive++;
			totalBabbies++;
			actualCrotchDemons++;
			notFoetusBabbie++;
			}
			
		}
	}
	//changes the probablility of insemination of women using age
	public void changeProb(int cAge)
	{
		pDOvu = dubOChance[(cAge/12)-15];
	}
	
	public boolean singleO()
	{
		/*if (!switchOv)
		{
		int test = rand.nextInt(1000000)+1;
		if(test>pDOvu*1000000)
			return true;
		return false;
		}
		else
		{
			if (flipSwitch == 0)
			{
				int test = rand.nextInt(1000000)+1;
				if(test>pDOvu*1000000)
					return true;
				else
					flipSwitch = 1;
				return false;
			}
			else
				return false;
			
		}*/
		
		return false;
		
	}
	
	public String toString()
	{
		
		
		return"Woman ends :: " + age + " Number of Possible Childern :: " + (numLive + numDead) + "\n Number of Children who made it to 15 YO :: " + numLive;
	}
}
