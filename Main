import java.util.ArrayList;
import java.io.IOException;
public class Main {
public static String Cstring[];
public static double Cdouble[];
public static int total;
public static int actual;
public static int totalBirthed;

//make sure the dumb csv file read in doesn't have E notation

	public static void getDoubleO()
	{
		FileDriver hi = new FileDriver();
		Cstring = hi.cvsDriver("ovData.csv");
		Cdouble = new double[Cstring.length];
		for(int i = 0; i <Cstring.length-1; i++)
		{
			
			Cdouble[i] = Double.parseDouble(Cstring[i]);
			
		}
		
	}
	public static void finishCLife(Woman W)
	{
		
		
		for (Child T : W.children)
		{
			while(T.age<180 && !T.isDead)
			{
				if (T.age<180 && !T.isDead)
				{
					T.age++;
					T.isChildDead();
				}
				else if (T.age == 180 && !T.isDead)
				{
				T.endChild = 1;
				}
				else
				{}
			}
		}
	}
	
	public static void main(String[] args) throws IOException{
		//counter doubling values for number of kids reaching 15
		getDoubleO();
		ArrayList<Woman> totalWomen = new ArrayList<Woman>();
	for(int k = 0; k<10000;k++)
	{
		Woman W = new Woman();
		W.setDoubleOArray(Cdouble);
		for (int i = W.age; i<=W.ageOfMeno; i++)
		{
			W.isMommyDead();
			if (!W.isPrego)
				W.gotPregers();
			
			if(W.isDead) 
			{
				break;
			}
			else if(W.isPrego)
			{
				if(W.singleO())
				{
					Child C = new Child();
					W.children.add(C);
					W.children.get(W.children.size()-1).pregnancyNum = W.pregNum;
					int foetusAge = 0;
					while(W.isPrego)
					{
						W.isMommyDead();
						W.children.get(W.children.size()-1).isFoetusDead(foetusAge, i);
						if(W.isDead)//if statement for when woman is pregnant and dies
						{
							C.isDead = true;
							break;
						}
						else if (W.children.get(W.children.size()-1).isDead)
						{
							W.isPrego = false;
							break;
						}
						if (foetusAge > 8)
						{
							W.childBirth();
							W.children.get(W.children.size()-1).childBirth(i);
						}
						
						if(W.isDead || C.isDead)
						{
							W.isPrego = false;
							break;
						}
						foetusAge++;
						i++;
						W.changeProb(i);
						}
					}
				else
				{
					Child C1 = new Child();
					Child C2 = new Child();
					W.children.add(C1);
					W.children.add(C2);
					W.children.get(W.children.size()-1).pregnancyNum = W.pregNum;
					W.children.get(W.children.size()-2).pregnancyNum = W.pregNum;
					int foetusAge = 0;
					while(W.isPrego)
					{
						W.isMommyDead();
						if (W.isDead)
						{
							W.children.get(W.children.size()-1).isDead = true;
							W.children.get(W.children.size()-2).isDead = true;
							if (foetusAge < 4)
							{
								W.children.get(W.children.size()-1).deathBy = 3;
								W.children.get(W.children.size()-2).deathBy = 3;
							}
							else 
							{
								W.children.get(W.children.size()-1).deathBy = 4;
								W.children.get(W.children.size()-2).deathBy = 4;
							}
							break;
						}
						else if (C1.isDead && C2.isDead)
						{
							W.isPrego = false;
							break;
						}
						else if(C1.isDead)
						{
							W.children.get(W.children.size()-1).isFoetusDead(foetusAge, i);
						}
						else if (C2.isDead)
						{
							W.children.get(W.children.size()-2).isFoetusDead(foetusAge,i);
						}
						else
						{
							W.children.get(W.children.size()-1).isFoetusDead(foetusAge,i);
							W.children.get(W.children.size()-2).isFoetusDead(foetusAge,i);
						}
						
						if(W.isDead)
						{
							W.children.get(W.children.size()-1).isDead = true;
							W.children.get(W.children.size()-2).isDead = true;
							if (foetusAge < 4)
							{
								W.children.get(W.children.size()-1).deathBy = 3;
								W.children.get(W.children.size()-2).deathBy = 3;
							}
							else
							{
								W.children.get(W.children.size()-1).deathBy = 4;
								W.children.get(W.children.size()-2).deathBy = 4;
							}
							break;
						}
						else if (C1.isDead && C2.isDead)
						{
							
							if (foetusAge < 4)
							{
								W.children.get(W.children.size()-1).deathBy = 3;
								W.children.get(W.children.size()-2).deathBy = 3;
							}
							else
							{
								W.children.get(W.children.size()-1).deathBy = 4;
								W.children.get(W.children.size()-2).deathBy = 4;
							}
							W.isPrego = false;
							break;
						}
						if (foetusAge > 8)
						{
							W.childBirth();
							if (!W.children.get(W.children.size()-1).isDead)
							W.children.get(W.children.size()-1).childBirth(i);
							if (!W.children.get(W.children.size()-2).isDead)
							W.children.get(W.children.size()-2).childBirth(i);
						}	
						
						foetusAge++;
						i++;
						W.changeProb(i);
					}
				}
			}
			W.age = i;
			
		}
		finishCLife(W);
		// a loop that will run all the children 
		//who are alive and not 15 after the mom hits meno or dies.
		
		totalWomen.add(W);
		}
	
		String temp = "test1.csv";
		WriteFile data = new WriteFile(temp);
		
		//data.writeToFile("0 = alive \n1 = nat death 0-47 mo \n2 = nat death 48-180 mo \n"
				//	+ "3 = miscarriage \n4 = stillborn \n5 = death during birth");
		int t = 1;
		for (Woman wo : totalWomen)
		{
			wo.childCt();
			total += wo.totalBabbies;
			actual += wo.actualCrotchDemons;
			totalBirthed += wo.notFoetusBabbie;
			//data.writeToFile("This is Woman " + t);
			System.out.println("This is Woman " + t);
			//data.writeToFile(wo.toString());
			System.out.println(wo);
			for (Child prin : wo.children)
			{
				System.out.println(prin.timeOB + " " +prin.pregnancyNum + " " +prin.age + " " + prin.deathBy);
				//data.writeToFile(prin.age + "," + prin.deathBy);
			}
			t++;
		}
		FileDriver hi = new FileDriver();
		hi.cvsDriver("test1.csv");
		System.out.println("total Babies : " + total + "\nbabies who lived to 15 : " + actual
				+ "\nnumber of children birthed : " + totalBirthed +
				"\npercent of eggs fertilized who made it to 15 YO : " + (double)((double)actual/(double)total) 
			+	"\npercent of children birthed (live or dead) who made it to 15 YO : " + (double)((double)actual/(double)totalBirthed));
	}
	
	
}
